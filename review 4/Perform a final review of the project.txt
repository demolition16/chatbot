package com.chatbot;

import edu.stanford.nlp.simple.*;
import java.util.Scanner;
import java.sql.*;

public class Chatbot {

    // In-memory database to store conversations
    private static Connection conn;

    public static void main(String[] args) {
        // Initialize the database connection
        initDatabase();

        Scanner scanner = new Scanner(System.in);
        String userInput;

        System.out.println("Hello! I am your chatbot. Type 'exit' to end the conversation.");

        while (true) {
            System.out.print("You: ");
            userInput = scanner.nextLine().trim();

            if (userInput.equalsIgnoreCase("exit")) {
                System.out.println("Chatbot: Goodbye! Have a great day.");
                break;
            }

            // Log user input into the database
            logUserInput(userInput);

            String response = getResponse(userInput);
            System.out.println("Chatbot: " + response);
        }

        // Close the database connection after the conversation
        closeDatabase();
    }

    // Simple database initialization and connection setup
    private static void initDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:h2:mem:chatbot", "sa", "");
            Statement stmt = conn.createStatement();
            stmt.execute("CREATE TABLE IF NOT EXISTS conversation (id INT AUTO_INCREMENT, user_input VARCHAR(255), PRIMARY KEY(id))");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Log user input into the database
    private static void logUserInput(String input) {
        try {
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO conversation (user_input) VALUES (?)");
            pstmt.setString(1, input);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Close the database connection
    private static void closeDatabase() {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Enhanced response with NLP processing
    public static String getResponse(String input) {
        // Use Stanford NLP to analyze the input sentence
        Sentence sentence = new Sentence(input);
        String response;

        // Simple keyword-based intent matching
        if (sentence.contains("hello") || sentence.contains("hi")) {
            response = "Hello! How can I assist you today?";
        } else if (sentence.contains("how are you")) {
            response = "I'm doing well, thank you! How about you?";
        } else if (sentence.contains("bye")) {
            response = "Goodbye!";
        } else if (sentence.contains("your name")) {
            response = "I'm Chatbot, your virtual assistant!";
        } else {
            response = "I'm sorry, I didn't understand that. Can you try again?";
        }

        // Return the response
        return response;
    }
}

package com.chatbot;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class ChatbotTest {

    @Test
    public void testGetResponse_Hello() {
        String response = Chatbot.getResponse("hello");
        assertEquals("Hello! How can I assist you today?", response);
    }

    @Test
    public void testGetResponse_Bye() {
        String response = Chatbot.getResponse("bye");
        assertEquals("Goodbye!", response);
    }

    @Test
    public void testGetResponse_Unknown() {
        String response = Chatbot.getResponse("what is your name?");
        assertEquals("I'm Chatbot, your virtual assistant!", response);
    }
}
	<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.chatbot</groupId>
    <artifactId>chatbot</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- Stanford NLP Dependency for Natural Language Processing -->
        <dependency>
            <groupId>edu.stanford.nlp</groupId>
            <artifactId>stanford-corenlp</artifactId>
            <version>4.5.4</version>
        </dependency>

        <!-- H2 Database Dependency (In-Memory Database for Simple Storage) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
            <scope>runtime</scope>
        </dependency>

        <!-- JUnit 5 for Unit Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Plugin for running the Java main class -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
