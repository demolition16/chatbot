// ChatbotService.java
public class ChatbotService {
    private ChatbotDAO chatbotDAO;

    public ChatbotService(ChatbotDAO chatbotDAO) {
        this.chatbotDAO = chatbotDAO;
    }

    public String processMessage(String userMessage) {
        if (userMessage == null || userMessage.isEmpty()) {
            return "Please enter a message.";
        }
        if (userMessage.equalsIgnoreCase("help")) {
            return getHelpMessage();
        }
        String response = generateResponse(userMessage);
        chatbotDAO.saveConversation(userMessage, response);
        return response;
    }

    private String getHelpMessage() {
        return "Here are some commands you can use:\n- help: Show this message\n- exit: End the chat";
    }

    private String generateResponse(String message) {
        return "Echo: " + message;
    }
}

// ChatbotDAO.java
public interface ChatbotDAO {
    void saveConversation(String userMessage, String botResponse);
    String fetchLastBotResponse(String userMessage);
}

// ChatbotDAOImpl.java
import java.util.HashMap;
import java.util.Map;

public class ChatbotDAOImpl implements ChatbotDAO {
    private Map<String, String> conversationHistory = new HashMap<>();

    @Override
    public void saveConversation(String userMessage, String botResponse) {
        conversationHistory.put(userMessage, botResponse);
        System.out.println("Saved to DB: " + userMessage + " | " + botResponse);
    }

    @Override
    public String fetchLastBotResponse(String userMessage) {
        return conversationHistory.getOrDefault(userMessage, "No previous response found.");
    }
}

// ChatbotServiceTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class ChatbotServiceTest {
    private ChatbotDAO chatbotDAO;
    private ChatbotService chatbotService;

    @BeforeEach
    public void setUp() {
        chatbotDAO = mock(ChatbotDAO.class);
        chatbotService = new ChatbotService(chatbotDAO);
    }

    @Test
    public void testProcessMessage_WithValidMessage() {
        String response = chatbotService.processMessage("Hello");
        assertEquals("Echo: Hello", response);
        verify(chatbotDAO, times(1)).saveConversation("Hello", "Echo: Hello");
    }

    @Test
    public void testProcessMessage_WithEmptyMessage() {
        String response = chatbotService.processMessage("");
        assertEquals("Please enter a message.", response);
        verify(chatbotDAO, never()).saveConversation(anyString(), anyString());
    }

    @Test
    public void testProcessMessage_WithHelpCommand() {
        String response = chatbotService.processMessage("help");
        assertTrue(response.contains("Here are some commands you can use:"));
        verify(chatbotDAO, never()).saveConversation(anyString(), anyString());
    }
}

// ChatbotDAOImplTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ChatbotDAOImplTest {
    private ChatbotDAOImpl chatbotDAO;

    @BeforeEach
    public void setUp() {
        chatbotDAO = new ChatbotDAOImpl();
    }

    @Test
    public void testSaveConversation() {
        chatbotDAO.saveConversation("Hi", "Echo: Hi");
        String response = chatbotDAO.fetchLastBotResponse("Hi");
        assertEquals("Echo: Hi", response);
    }

    @Test
    public void testFetchLastBotResponse_NotFound() {
        String response = chatbotDAO.fetchLastBotResponse("Unknown");
        assertEquals("No previous response found.", response);
    }
}
